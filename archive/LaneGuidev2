# LaneGuidance Software
# Version: 2
# Date Created: 2 Mar 2020
# Last Modified: 10 Mar 2020


# setup
import cv2
import numpy as np
import imutils
from arg_parser import args
import time

# set initial state machine
intersection_state = 1
state1 = 0


def read_frame():
    # needs to be updated to take frames from active camera
    global frame
    global n  # loops through while - needs to be updated/removed for video
    frame = cv2.imread('intersection' + str(n) + '.bmp')  # loops through saved images, needs to be removed for video
    cv2.namedWindow('test', cv2.WINDOW_AUTOSIZE)  # create a window
    cv2.imshow('test', frame)  # show the image in that window


def lane_ROI():
    # Define Region of Interest (ROI)
    global lane_vertices
    rows, cols = frame.shape[:2]
    bottom_left = [cols * 0.00, rows * 1.00]
    top_left = [cols * 0.20, rows * 0.50]
    bottom_right = [cols * 1.00, rows * 1.00]
    top_right = [cols * 0.8, rows * 0.50]
    lane_vertices = np.array([[bottom_left, top_left, top_right, bottom_right]], dtype=np.int32)


def process_lanes():
    # Create a polygon at the bottom of the frame to target only lane lines that we want to see
    global lane_edges

    mask = np.zeros_like(frame)
    if len(mask.shape) == 2:
        cv2.fillPoly(mask, vertices, 255)
    else:
        # In case the input image has a channel dimension
        cv2.fillPoly(mask, lane_vertices, (255,) * mask.shape[2])

    ROI = cv2.bitwise_and(frame, mask)

    # Convert image to grayscale and HSV, and filter out colors that aren't white or yellow
    grey = cv2.cvtColor(ROI, cv2.COLOR_BGR2GRAY)
    processed_hsv = cv2.cvtColor(ROI, cv2.COLOR_BGR2HSV)
    lower_yellow = np.array([20, 100, 100], dtype=int)
    upper_yellow = np.array([30, 255, 255], dtype=int)
    mask_yellow = cv2.inRange(processed_hsv, lower_yellow, upper_yellow)
    mask_white = cv2.inRange(grey, 200, 255)
    mask_yw = cv2.bitwise_or(mask_white, mask_yellow)
    processed = cv2.bitwise_and(grey, mask_yw)

    # Smooth the Image for processing. Kernel size must be odd. Larger kernel size means more processing
    kernel_size = 3

    processed = cv2.GaussianBlur(processed, (kernel_size, kernel_size), 0)

    # detect edges in the image
    low_threshold = 50
    high_threshold = 150

    lane_edges = cv2.Canny(processed, low_threshold, high_threshold)


def create_lanes():
    # Hough Lines - Create lines over the lanes
    global center_line
    global right_line
    global left_line

    # these are important parameters for adjusting how it will create lines. Adjusting them can fix issues
    lines = cv2.HoughLinesP(lane_edges, rho=1, theta=np.pi / 360, threshold=50, minLineLength=100, maxLineGap=50)

    # Create Main Lines by averaging all detected hough lines
    global line_image
    line_image = np.zeros_like(frame)

    left_fit = []
    right_fit = []
    center_fit = []
    for line in lines:
        x1, y1, x2, y2 = line.reshape(4)
        # Fit first order function
        # params = np.polyfit((x1, y1), (x2, y2), 1)
        slope = (y2 - y1) / (x2 - x1)
        if slope < -1 / 4:
            left_fit.append((x1, y1, x2, y2))
            cv2.line(line_image, (x1, y1), (x2, y2), (255, 0, 0), 2)
        elif slope > 1 / 4:
            right_fit.append((x2, y2, x1, y1))
            cv2.line(line_image, (x1, y1), (x2, y2), (0, 255, 0), 2)
        else:
            center_fit.append((x1, y1, x2, y2))
            cv2.line(line_image, (x1, y1), (x2, y2), (0, 0, 255), 2)

    left_line, right_line, center_line = [], [], []
    if len(left_fit) > 0:
        left_fit_avg = np.average(left_fit, axis=0)
        x1 = int(left_fit_avg[0])
        y1 = int(left_fit_avg[1])
        x2 = int(left_fit_avg[2])
        y2 = int(left_fit_avg[3])
        left_line = [x1, y1, x2, y2]
        left_line = np.array(left_line)

    if len(right_fit) > 0:
        right_fit_avg = np.average(right_fit, axis=0)
        x1 = int(right_fit_avg[0])
        y1 = int(right_fit_avg[1])
        x2 = int(right_fit_avg[2])
        y2 = int(right_fit_avg[3])
        right_line = [x1, y1, x2, y2]
        right_line = np.array(right_line)

    if len(center_fit) > 0:
        center_fit_avg = np.average(center_fit, axis=0)
        x1 = int(center_fit_avg[0])
        y1 = int(center_fit_avg[1])
        x2 = int(center_fit_avg[2])
        y2 = int(center_fit_avg[3])
        center_line = [x1, y1, x2, y2]
        center_line = np.array(center_line)


def draw_lanes():
    # draw lane lines
    # may not be necessary in final code. Draws the lanes on an image
    color = [255, 0, 0]
    thickness = 50
    global lane_image
    lane_image = np.zeros_like(frame)

    if len(right_line) > 0:
        x1, y1, x2, y2 = right_line.reshape(4)
        cv2.line(lane_image, (x1, y1), (x2, y2), color, thickness)
    if len(left_line) > 0:
        x1, y1, x2, y2 = left_line.reshape(4)
        cv2.line(lane_image, (x1, y1), (x2, y2), color, thickness)
    if len(center_line) > 0:
        x1, y1, x2, y2 = center_line.reshape(4)
        cv2.line(lane_image, (x1, y1), (x2, y2), color, thickness)


def show_test():
    # displays picture with lanes and intersections - for testing/visualization purposes
    cv2.namedWindow('lanes', cv2.WINDOW_AUTOSIZE)  # create a window
    cv2.imshow('lanes', lane_image)  # show the image in that window

    cv2.namedWindow('intersections', cv2.WINDOW_AUTOSIZE)  # create a window
    cv2.imshow('intersections', intersection_image)  # show the image in that window


def navigation():
    # navigation decision making script
    height, width, _ = frame.shape
    thickness = 50
    mid = int(width / 2)

    if np.any(right_line) and np.any(left_line) and np.any(center_line):
        left_x2 = left_line[2]
        right_x2 = right_line[2]
        nav_point_x = int((left_x2 + right_x2) / 2)
        print('turn around')  # this eventually needs to include a motor command

    elif np.any(right_line) and np.any(left_line):
        left_x2 = left_line[2]
        right_x2 = right_line[2]
        nav_point_x = int((left_x2 + right_x2) / 2)

        if nav_point_x > int(1.2 * mid):
            print('lateral right')  # this eventually needs to include a motor command
        if nav_point_x < int(.8 * mid):
            print('lateral left')  # this eventually needs to include a motor command
        else:
            print("drive straight")  # this eventually needs to include a motor command

    elif np.any(left_line):
        left_x2 = left_line[2]
        left_x1 = left_line[0]
        nav_point_x = int(mid + left_x2 - left_x1)
        print('turn right')  # this eventually needs to include a motor command

    elif np.any(right_line):
        right_x2 = right_line[2]
        right_x1 = right_line[0]
        nav_point_x = int(mid + right_x2 - right_x1)
        print('turn left')  # this eventually needs to include a motor command

    nav_point_y = int(height / 2)  # middle of screen

    cv2.line(lane_image, (mid, height), (nav_point_x, nav_point_y), [0, 255, 0], thickness)


def intersection_ROI():
    # Define Region of Interest (ROI) for the intersection

    global intersection_vertices
    rows, cols = frame.shape[:2]
    bottom_left = [cols * 0.0, rows * 1]
    top_left = [cols * 0.0, rows * 0.0]
    bottom_right = [cols * 1, rows * 1]
    top_right = [cols * 1, rows * 0]
    intersection_vertices = np.array([[bottom_left, top_left, top_right, bottom_right]], dtype=np.int32)


def process_intersection():
    # filter the region of interest (ROI) for the intersection

    global intersection_edges

    mask = np.zeros_like(frame)
    if len(mask.shape) == 2:
        cv2.fillPoly(mask, vertices, 255)
    else:
        # In case the input image has a channel dimension
        cv2.fillPoly(mask, intersection_vertices, (255,) * mask.shape[2])

    ROI = cv2.bitwise_and(frame, mask)

    # process image
    # Convert image to grayscale and HSV, and filter out colors that aren't purple"
    gray = cv2.cvtColor(ROI, cv2.COLOR_BGR2GRAY)
    processed_hsv = cv2.cvtColor(ROI, cv2.COLOR_BGR2HSV)
    lower_purple = np.array([120, 100, 100], dtype=int)
    upper_purple = np.array([170, 255, 255], dtype=int)
    mask_purple = cv2.inRange(processed_hsv, lower_purple, upper_purple)
    processed = cv2.bitwise_and(gray, mask_purple)

    # smoothing
    kernel_size = 3

    processed = cv2.GaussianBlur(processed, (kernel_size, kernel_size), 0)

    # detect edges in the image
    low_threshold = 50
    high_threshold = 150

    intersection_edges = cv2.Canny(processed, low_threshold, high_threshold)


def create_intersection():
    global state1, slope
    global intersection_state
    global left_int
    global right_int
    global top_int
    global bottom_int

    # Hough Lines for intersection
    lines = cv2.HoughLinesP(intersection_edges, rho=1, theta=np.pi / 360, threshold=50, minLineLength=20, maxLineGap=50)

    # Create Main Lines by averaging all detected hough lines for intersection
    left_fit = []
    right_fit = []
    horizontal_fit = []
    bottom_fit = []
    top_fit = []
    y1list = []
    if lines is not None:
        for line in lines:
            x1, y1, x2, y2 = line.reshape(4)
            # Fit first order function
            # params = np.polyfit((x1, y1), (x2, y2), 1)
            if x2 - x1 == 0:
                pass
            else:
                slope = (y2 - y1) / (x2 - x1)

            if slope < -1 / 2:
                left_fit.append((x1, y1, x2, y2))
                cv2.line(line_image, (x1, y1), (x2, y2), (255, 0, 0), 2)

            elif slope > 1 / 2:
                right_fit.append((x1, y1, x2, y2))
                cv2.line(line_image, (x1, y1), (x2, y2), (0, 255, 0), 2)

            else:
                horizontal_fit.append((x1, y1, x2, y2))
                y1list.append(y1)
                cv2.line(line_image, (x1, y1), (x2, y2), (255, 0, 255), 2)

    y1_avg = np.average(y1list)

    for [x1, y1, x2, y2] in horizontal_fit:
        if y1 > 1.1 * y1_avg:
            top_fit.append((x1, y1, x2, y2))
            cv2.line(line_image, (x1, y1), (x2, y2), (0, 0, 255), 2)
        else:
            bottom_fit.append((x1, y1, x2, y2))
            cv2.line(line_image, (x1, y1), (x2, y2), (255, 255, 0), 2)

    left_int, right_int, bottom_int, top_int = [], [], [], []

    if len(left_fit) > 0:
        left_fit_avg = np.average(left_fit, axis=0)
        x1 = int(left_fit_avg[0])
        y1 = int(left_fit_avg[1])
        x2 = int(left_fit_avg[2])
        y2 = int(left_fit_avg[3])
        left_int = [x1, y1, x2, y2]
        left_int = np.array(left_int)

    if len(right_fit) > 0:
        right_fit_avg = np.average(right_fit, axis=0)
        x1 = int(right_fit_avg[0])
        y1 = int(right_fit_avg[1])
        x2 = int(right_fit_avg[2])
        y2 = int(right_fit_avg[3])
        right_int = [x1, y1, x2, y2]
        right_int = np.array(right_int)

    if len(bottom_fit) > 0:
        bottom_fit_avg = np.average(bottom_fit, axis=0)
        x1 = int(bottom_fit_avg[0])
        y1 = int(bottom_fit_avg[1])
        x2 = int(bottom_fit_avg[2])
        y2 = int(bottom_fit_avg[3])
        bottom_int = [x1, y1, x2, y2]
        bottom_int = np.array(bottom_int)

    if len(top_fit) > 0:
        top_fit_avg = np.average(top_fit, axis=0)
        x1 = int(top_fit_avg[0])
        y1 = int(top_fit_avg[1])
        x2 = int(top_fit_avg[2])
        y2 = int(top_fit_avg[3])
        top_int = [x1, y1, x2, y2]
        top_int = np.array(top_int)

    if lines is not None:
        if state1 == 2:
            if bottom_int[3] > 1000 or right_int[3] > 1000 or left_int[3] > 1000:
                intersection_state = 2
        elif 200 < left_int[3] < 800 or 200 < bottom_int[3] < 800 or 200 < right_int[3] < 800:
            state1 = 1
        else:
            state1 = 0

    # draw intersection lines
    color = [255, 255, 0]
    thickness = 50

    global intersection_image
    intersection_image = np.zeros_like(frame)

    if len(left_int) > 0:
        x1, y1, x2, y2 = left_int.reshape(4)
        cv2.line(intersection_image, (x1, y1), (x2, y2), color, thickness)
    if len(right_int) > 0:
        x1, y1, x2, y2 = right_int.reshape(4)
        cv2.line(intersection_image, (x1, y1), (x2, y2), color, thickness)
    if len(top_int) > 0:
        x1, y1, x2, y2 = top_int.reshape(4)
        cv2.line(intersection_image, (x1, y1), (x2, y2), color, thickness)
    if len(left_int) > 0:
        x1, y1, x2, y2 = bottom_int.reshape(4)
        cv2.line(intersection_image, (x1, y1), (x2, y2), color, thickness)


def guidance_decision():
    global turn
    global intersection_state

    turn_left = 0
    priority = turn_left

    if len(left_int) > 0 and priority == 0:
        turn = "left"
    elif len(top_int) > 0:
        turn = "straight"
    elif len(right_int) > 0:
        turn = "right"
    else:
        turn = "Backwards"

    print('guidance decision is:', turn)

    intersection_state = 1


def main():
    global state1
    global intersection_state

    read_frame()
    lane_ROI()
    process_lanes()
    create_lanes()
    draw_lanes()
    intersection_ROI()
    process_intersection()
    create_intersection()
    show_test()
    if state1 == 1:
        guidance_decision()
        navigation()
        state1 = 2
    elif intersection_state == 1:
        # run intersection detection to make decision
        navigation()
    elif intersection_state == 2:
        # execute decision and reset state
        print("Go", turn)
        state1 = 0
        intersection_state = 1


n = 1
while n < 9:
    print(n)
    main()
    n += 1

cv2.waitKey()  # turn it off when I key stroke within
